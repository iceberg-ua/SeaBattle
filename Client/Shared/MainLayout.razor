@using Microsoft.AspNetCore.SignalR.Client;
@using SeaBattle.Client.Services
@using SeaBattle.Shared.Hub;
@using SeaBattle.Shared.Player

@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

@implements IAsyncDisposable

<CascadingValue Value="BattleHub" IsFixed=true>
    @if (_initialized)
    {
        <CascadingValue Value="Player">
            <main>
                @Body
            </main>
        </CascadingValue>
    }
</CascadingValue>


@code {
    [Parameter]
    public RenderFragment? Body { get; set; }

    public PlayerInfo Player { get; private set; } = default!;
    public HubConnection BattleHub { get; private set; } = default!;

    private bool _initialized = false;

    protected async override Task OnInitializedAsync()
    {
        BattleHub = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/battlehub"))
            .Build();

        BattleHub.On<PlayerInfo>(nameof(IGameHub.JoinedGame), OnJoinedGame);

        await BattleHub.StartAsync();
        await TryGetPlayerState();
    }

    #region Hub Handlers

    private async Task TryGetPlayerState()
    {
        var playerId = await LocalStorage.GetItemAsync("player");
        Guid.TryParse(playerId, out Guid id);

        await BattleHub?.SendAsync(nameof(IGameHub.JoinGame), id, "")!;
    }

    private async Task OnJoinedGame(PlayerInfo player)
    {
        _initialized = true;
        Player = player;

        if (Player != null)
        {
            await LocalStorage.SetItemAsync("player", player.Id);
            Navigation.NavigateTo("/");
        }
        else
            Navigation.NavigateTo("/sign-in");
    }

    #endregion

    public async ValueTask DisposeAsync()
    {
        if (BattleHub is not null)
        {
            await BattleHub.DisposeAsync();
        }
    }
}
