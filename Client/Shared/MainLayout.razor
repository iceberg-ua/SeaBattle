@using Microsoft.AspNetCore.SignalR.Client;
@using SeaBattle.Client.Services
@using SeaBattle.Shared.Hub;
@using SeaBattle.Shared.Player

@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

@implements IAsyncDisposable

<CascadingValue Value="BattleHub" IsFixed>
    @if (_initialized)
    {
        <main>
            @Body
        </main>
    }
</CascadingValue>


@code {
    [Parameter]
    public RenderFragment? Body { get; set; }

    [Inject] 
    public required GameStateClient GameState { get; set; }
    
    public PlayerInfo Player { get; private set; } = null!;
    public HubConnection BattleHub { get; private set; } = null!;

    private bool _initialized;

    protected override async Task OnInitializedAsync()
    {
        BattleHub = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/battlehub"))
            .Build();

        //subscribe to server event when game is created/found and player is joined to it
        BattleHub.On<PlayerInfo>(nameof(IGameHub.JoinedGame), OnJoinedGame);

        await BattleHub.StartAsync();
        await TryGetPlayerState();
    }

    #region Hub Handlers

    private async Task TryGetPlayerState()
    {
        var playerId = await LocalStorage.GetItemAsync("player");
        Guid.TryParse(playerId, out Guid id);

        //request player info with the id
        await BattleHub?.SendAsync(nameof(IGameHub.JoinGame), id, "")!;
    }

    private async Task OnJoinedGame(PlayerInfo? player)
    {
        _initialized = true;

        if (player is null || GameState.Stage is GameStageEnum.SigningIn)
            Navigation.NavigateTo("/sign-in");
        else
        {
            GameState.SwitchToSetupStage();
            Player = player;
            await LocalStorage.SetItemAsync("player", player.Id);
            Navigation.NavigateTo("/");
        }

    }

    #endregion

    public async ValueTask DisposeAsync()
    {
        await BattleHub.DisposeAsync();
    }
}
