@using Microsoft.AspNetCore.SignalR.Client;
@using SeaBattle.Client.Services
@using SeaBattle.Shared.Hub;
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation

@implements IAsyncDisposable

<CascadingValue Value="PlayerState" IsFixed=true>
    <CascadingValue Value="BattleHub">
        <main>
            @Body
        </main>
    </CascadingValue>
</CascadingValue>


@code {
    [Parameter]
    public RenderFragment? Body { get; set; }

    public PlayerState? PlayerState { get; private set; }
    public HubConnection BattleHub { get; private set; } = default!;

    protected async override Task OnInitializedAsync()
    {
        BattleHub = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/battlehub"))
            .Build();

        BattleHub.On<PlayerState, Guid>(nameof(IGameHub.JoinedGame), JoinedGame);

        await BattleHub.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await TryGetPlayerState();
            StateHasChanged();
        }
    }

    #region Hub Handlers

    async Task JoinedGame(PlayerState state, Guid playerId)
    {
        PlayerState = state;
        PlayerState.PlayerId = playerId;

        Console.WriteLine($"Got new state: table {PlayerState.TableId}, player {playerId}");

        LocalStorage.SetItemAsync("table", PlayerState.TableId);
        LocalStorage.SetItemAsync("player", playerId);

        await InvokeAsync(StateHasChanged);
    }

    private async Task TryGetPlayerState()
    {
        var gameId = await LocalStorage.GetItemAsync("table");
        var playerId = await LocalStorage.GetItemAsync("player");

        if (Guid.TryParse(gameId, out Guid gameGuid) && 
            Guid.TryParse(playerId, out Guid playerGuid))
        {
            Console.WriteLine($"Request state: table {gameGuid}, player {playerGuid}");
            await BattleHub?.SendAsync(nameof(IGameHub.JoinGame), gameGuid, playerGuid, "")!;
        }
    }

    #endregion

    public async ValueTask DisposeAsync()
    {
        if (BattleHub is not null)
        {
            await BattleHub.DisposeAsync();
        }
    }
}
