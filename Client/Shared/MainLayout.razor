@using Microsoft.AspNetCore.SignalR.Client;
@using SeaBattle.Client.Services
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation

@implements IAsyncDisposable

<CascadingValue Value="PlayerState" IsFixed=true>
    <CascadingValue Value="BattleHub" IsFixed=true>
        <main>
            @if(PlayerState is not null)
            {
                @Body
            }
        </main>
    </CascadingValue>
</CascadingValue>


@code {
    [Parameter]
    public RenderFragment? Body { get; set; }

    public PlayerState? PlayerState { get; private set; }
    public HubConnection BattleHub { get; private set; } = default!;

    private async Task InitPlayerState()
    {
        var tableId = await LocalStorage.GetItemAsync("table");
        var userName = await LocalStorage.GetItemAsync("user");

        PlayerState = new();

        if (Guid.TryParse(tableId, out Guid tableGuid) && !string.IsNullOrEmpty(userName))
        {
            PlayerState.TableId = tableGuid;
            PlayerState.Name = userName;
            PlayerState.IsLoggedIn = true;
        }
    }

    protected async override Task OnInitializedAsync()
    {
        BattleHub = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/battlehub"))
            .Build();

        await BattleHub.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await InitPlayerState();
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (BattleHub is not null)
        {
            await BattleHub.DisposeAsync();
        }
    }
}
