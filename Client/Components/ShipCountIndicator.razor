@using SeaBattle.Shared
@implements IDisposable

@if (GameState?.Stage == GameStageEnum.Setup)
{
    <div class="ship-counts-container @(FleetComplete ? "fleet-complete" : "")">
        <div class="ship-counts">
            @foreach (var kvp in MaxShipCounts.OrderByDescending(x => x.Key))
            {
                var size = kvp.Key;
                var maxCount = kvp.Value;
                var currentCount = CurrentShipCounts.GetValueOrDefault(size, 0);
                
                <div class="ship-type-group">
                    <div class="ship-type-header">
                        <div class="ship-type-label">@GetSizeLabel(size)</div>
                        @if (currentCount > maxCount)
                        {
                            <div class="excess-indicator">!</div>
                        }
                    </div>
                    <div class="ship-symbols">
                        @for (int i = 0; i < maxCount; i++)
                        {
                            var isPlaced = i < currentCount;
                            var cssClass = isPlaced ? "placed" : "missing";
                            
                            <div class="ship-symbol @cssClass">
                                @for (int j = 0; j < size; j++)
                                {
                                    <div class="ship-deck"></div>
                                }
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private GameStateClient? GameState => GameStateService.GameState;
    private bool FleetComplete => GameState?.FleetComplete ?? false;
    
    private Dictionary<int, int> CurrentShipCounts => GameState?.Player?.FleetCounts ?? new();
    private Dictionary<int, int> MaxShipCounts => Fleet.GetMaxShipCounts();
    
    protected override void OnInitialized()
    {
        GameStateService.StateChanged += OnStateChanged;
    }
    
    private void OnStateChanged(GameStateClient? newState)
    {
        InvokeAsync(StateHasChanged);
    }
    
    private string GetSizeLabel(int size)
    {
        return size switch
        {
            1 => "Patrol Boat",
            2 => "Destroyer", 
            3 => "Cruiser",
            4 => "Battleship",
            _ => $"{size}-deck"
        };
    }
    
    public void Dispose()
    {
        GameStateService.StateChanged -= OnStateChanged;
    }
}