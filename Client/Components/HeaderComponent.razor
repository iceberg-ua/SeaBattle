@using SeaBattle.Shared.Player

<div class="header-container">
    <div class="header-title">
        <h1>SEA BATTLE</h1>
    </div>

    <div class="game-info @GetStateClass()">
        @if (GameState.Stage == GameStageEnum.Setup)
        {
            <div class="setup-phase">
                <h2>Battle Preparation</h2>
                <p>Position your ships on the field and press <strong>Ready</strong> when your fleet is complete.</p>
                <div class="player-info">
                    <span class="player-badge">@GameState.Player.Name</span>
                    @if (!string.IsNullOrEmpty(GameState.OpponentsName))
                    {
                        <span class="versus">VS</span>
                        <span class="player-badge opponent">@GameState.OpponentsName</span>
                    }
                </div>
            </div>
        }
        else if (GameState.Stage == GameStageEnum.Game)
        {
            <div class="battle-phase">
                <h2>Battle in Progress</h2>

                <div class="turn-status-container">
                    @if (GameState.Player.State == PlayerStateEnum.InTurn)
                    {
                        <div class="turn-status your-turn">
                            <div class="status-icon">
                                <div class="pulse-ring"></div>
                                <span class="oi oi-target" aria-hidden="true"></span>
                            </div>
                            <div class="status-text">YOUR TURN</div>
                        </div>
                    }
                    else if (GameState.Player.State == PlayerStateEnum.WaitingForTurn)
                    {
                        <div class="turn-status waiting-turn">
                            <div class="status-icon">
                                <div class="waiting-animation"></div>
                                <span class="oi oi-clock" aria-hidden="true"></span>
                            </div>
                            <div class="status-text">WAITING FOR OPPONENT</div>
                        </div>
                    }
                </div>

                <div class="player-info">
                    <span class="player-badge @(GameState.Player.State == PlayerStateEnum.InTurn ? "active" : "")">
                        @GameState.Player.Name
                    </span>
                    <span class="versus">VS</span>
                    <span class="player-badge opponent @(GameState.Player.State == PlayerStateEnum.WaitingForTurn ? "active" : "")">
                        @GameState.OpponentsName
                    </span>
                </div>
            </div>
        }
        else if (GameState.Stage == GameStageEnum.GameOver)
        {
            <div class="game-over">
                <h2 class="@(GameState.Player.State == PlayerStateEnum.Won ? "win" : "lost")">
                    @(GameState.Player.State == PlayerStateEnum.Won ? "VICTORY!" : "DEFEAT!")
                </h2>
                <div class="player-info">
                    <span class="player-badge @(GameState.Player.State == PlayerStateEnum.Won ? "winner" : "")">
                        @GameState.Player.Name
                    </span>
                    <span class="versus">VS</span>
                    <span class="player-badge opponent @(GameState.Player.State != PlayerStateEnum.Won ? "winner" : "")">
                        @GameState.OpponentsName
                    </span>
                </div>
                <p>The battle has ended. Would you like to play again?</p>
            </div>
        }
    </div>
</div>

@code {
    [CascadingParameter]
    public required GameStateClient GameState { get; set; }

    private string GetStateClass()
    {
        return GameState.Stage switch
        {
            GameStageEnum.Setup => "setup-state",
            GameStageEnum.Game => "game-state",
            GameStageEnum.GameOver => "gameover-state",
            _ => string.Empty
        };
    }
}