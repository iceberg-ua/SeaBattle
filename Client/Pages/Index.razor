@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using SeaBattle.Client.Services;
@using SeaBattle.Shared.Hub;

@inject IJSRuntime JsRuntime
@inject ILocalStorageService Storage

<div class="container centered-form">
    @if (PlayerState is null)
    {
        <LoginComponent OnJoinButtonClick="JoinButtonClicked" />
    }
    else
    {
        <div class="text-center mb-3">
            <lable class="mb-5">
                <b>@PlayerState.Name</b>
            </lable>
            <br/>
            <label>Welcome to the Sea Battle</label>

            <div class="text-center mb-1">
                Now postion your ships and press <b>Ready</b> button
            </div>
            <div class="field-container">
                <Battlefield Field="PlayerState.Field" FieldSize="PlayerState.FieldSize" CellClicked="@OwnFieldCellClicked"></Battlefield>
                @if (PlayerState.InProgress)
                {
                    <Battlefield Field="PlayerState.Field" FieldSize="PlayerState.FieldSize" CellClicked="@OwnFieldCellClicked"></Battlefield>
                }
            </div>

            @if (!PlayerState.InProgress && !Waiting)
            {
                <div class="button-container">
                    <button class="btn btn-danger" disabled="@ClearButtonDisable" @onclick=ClearButtonClicked>Clear</button>
                    <button class="btn btn-success" disabled="@NotReady" @onclick=OnReadyButtonClick>Ready</button>
                </div>
            }
            else @if (Waiting)
            {
                <h3>Waiting for opponent</h3>
            }
    </div>
    }
</div>

@code {
    [CascadingParameter]
    public HubConnection BattleHub { get; set; } = default!;

    [CascadingParameter]
    public PlayerState PlayerState { get; set; } = default!;

    private bool ClearButtonDisable => PlayerState.Field.All(c => c == CellState.empty);

    private bool NotReady => false;
    // private bool NotReady => !PlayerState.Fleet.Complete;

    private bool Waiting { get; set; } = false;

    private void OwnFieldCellClicked((int x, int y) cell)
    {
        if(!PlayerState.InProgress)
            PlayerState.TryToUpdateState(cell.x, cell.y);
    }

    private void ClearButtonClicked(MouseEventArgs e)
    {
        PlayerState.ClearField();
    }

    #region Hub API

    private async Task JoinButtonClicked(string userName)
    {
        await BattleHub?.SendAsync(nameof(IGameHub.JoinGame), Guid.Empty, Guid.Empty,userName)!;
    }

    private async Task OnReadyButtonClick()
    {
        Waiting = true;
        await BattleHub?.SendAsync(nameof(IGameHub.PlayerReady), PlayerState.TableId, PlayerState.PlayerId)!;
    }

    #endregion
}